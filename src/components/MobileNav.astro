---
// src/components/MobileNav.astro
export interface Props {
  lang: 'en' | 'bg';
  homeHref: string;
  servicesHref: string;
  aboutHref: string;
  momentsHref: string;
  navHomeText: string;
  navServicesText: string;
  navAboutText: string;
  navMomentsText: string;
  enLinkHref: string;
  bgLinkHref: string;
  toggleMenuLabel?: string;
}

const {
  lang,
  homeHref,
  servicesHref,
  aboutHref,
  momentsHref,
  navHomeText,
  navServicesText,
  navAboutText,
  navMomentsText,
  enLinkHref,
  bgLinkHref,
  toggleMenuLabel = 'Toggle menu'
} = Astro.props;

---

<div id="mobile-nav-root" class="w-full h-full lg:hidden fixed z-40">
  {/* Header bar - already snappy */}
  <div id="mobile-header-bar" class="flex justify-between items-center w-full px-3 py-3 relative z-50 bg-base-100">
    <h1>logo placeholder</h1>
    <button
      id="mobile-menu-toggle"
      type="button"
      class="group p-3 z-50 rounded-md focus:outline-none" aria-label={toggleMenuLabel}
      aria-expanded="false"
      aria-controls="mobile-menu-items-container"
    >
      <div class="space-y-3"> <span
          class="block h-1 w-12 origin-center rounded-full bg-slate-600 transition-transform transition-colors ease-in-out duration-300 group-[.menu-active]:bg-slate-50 group-[.menu-active]:translate-y-[10px] group-[.menu-active]:rotate-45"
          ></span>
        <span
          class="block h-1 w-10 origin-center rounded-full bg-slate-600 transition-transform transition-colors ease-in-out duration-300 group-[.menu-active]:bg-slate-50 group-[.menu-active]:w-12 group-[.menu-active]:-translate-y-[6px] group-[.menu-active]:-rotate-45"
          ></span>
      </div>
    </button>
  </div>

  {/* Overlay - already snappy */}
  <div id="mobile-menu-overlay" class="fixed inset-0 bg-zinc-600 opacity-0 pointer-events-none z-30"></div>

  {/* Menu items container - simplified for layout focus */}
  <div
    id="mobile-menu-items-container"
    class="hidden absolute w-full h-full z-50 flex flex-col justify-center items-center gap-20 text-white text-5xl"
    >
    <div class="flex gap-2 divide-x">
      <a
        href={enLinkHref}
        class:list={[
          "mobile-nav-link pr-2",
          lang === 'en' ? 'pointer-events-none text-gray-400' : 'hover:text-gray-300'
        ]}
        aria-current={lang === 'en' ? 'page' : undefined}
        lang="en"
        hreflang="en"
      >en</a>
      <a
        href={bgLinkHref}
        class:list={[
          "mobile-nav-link pl-2",
          lang === 'bg' ? 'pointer-events-none text-gray-400' : 'hover:text-gray-300'
        ]}
        aria-current={lang === 'bg' ? 'page' : undefined}
        lang="bg"
        hreflang="bg"
      >bg</a>
    </div>

    <a href={homeHref} class="mobile-nav-link">{navHomeText}</a>
    <a href={servicesHref} class="mobile-nav-link">{navServicesText}</a>
    <a href={aboutHref} class="mobile-nav-link">{navAboutText}</a>
    <a href={momentsHref} class="mobile-nav-link">{navMomentsText}</a>
  </div>
</div>

<script>
  let isInitialized = false;

  function initializeMobileNavigation() {
    if (isInitialized) return;

    const toggleButton = document.getElementById('mobile-menu-toggle') as HTMLButtonElement | null;
    const menuItemsContainer = document.getElementById('mobile-menu-items-container') as HTMLElement | null;
    const menuOverlay = document.getElementById('mobile-menu-overlay') as HTMLElement | null;
    const headerBar = document.getElementById('mobile-header-bar') as HTMLElement | null;

    if (!toggleButton || !menuItemsContainer || !menuOverlay || !headerBar) {
      console.error('MobileNav CRITICAL ERROR: Essential elements NOT FOUND.');
      console.log({
          toggleButtonFound: !!toggleButton,
          menuItemsContainerFound: !!menuItemsContainer,
          menuOverlayFound: !!menuOverlay,
          headerBarFound: !!headerBar
      });
      return;
    }

    let isOpen = false;

    const openMenu = () => {
      if (isOpen) return;
      isOpen = true;
      toggleButton.setAttribute('aria-expanded', 'true');
      toggleButton.classList.add('menu-active');

      // Show menu items container (snappy)
      menuItemsContainer.classList.remove('hidden');
      menuItemsContainer.classList.add('pointer-events-auto'); // Make it interactive

      // Show overlay (already snappy)
      menuOverlay.classList.remove('opacity-0', 'pointer-events-none');
      menuOverlay.classList.add('opacity-100');

      // Change header bar background (already snappy)
      headerBar.classList.remove('bg-transparent');
      headerBar.classList.add('bg-zinc-600');

      document.body.style.overflow = 'hidden';
    };

    const closeMenu = () => {
      if (!isOpen) return;
      isOpen = false;
      toggleButton.setAttribute('aria-expanded', 'false');
      toggleButton.classList.remove('menu-active');

      // Hide menu items container (snappy)
      menuItemsContainer.classList.add('hidden');
      menuItemsContainer.classList.remove('pointer-events-auto');

      // Hide overlay (already snappy)
      menuOverlay.classList.remove('opacity-100');
      menuOverlay.classList.add('opacity-0', 'pointer-events-none');
      
      // Revert header bar background (already snappy)
      if (headerBar) {
        headerBar.classList.add('bg-transparent');
        headerBar.classList.remove('bg-zinc-600');
      }

      document.body.style.overflow = '';
    };

    toggleButton.addEventListener('click', (event) => {
      event.stopPropagation();
      if (isOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    });

    document.addEventListener('keydown', (event) => {
      if (isOpen && event.key === 'Escape') {
        closeMenu();
      }
    });

    document.addEventListener('click', (event) => {
      if (!isOpen) return;
      const target = event.target as Node;
      if (menuItemsContainer && !menuItemsContainer.contains(target) &&
          toggleButton && !toggleButton.contains(target)) {
        closeMenu();
      }
    });

    const navLinks = menuItemsContainer.querySelectorAll<HTMLAnchorElement>('a.mobile-nav-link');
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (isOpen) {
          closeMenu();
        }
      });
    });
    
    isInitialized = true;
  }

  document.addEventListener('DOMContentLoaded', function() {
    initializeMobileNavigation();
  });

  document.addEventListener('astro:page-load', function() {
    initializeMobileNavigation();
  });
</script>