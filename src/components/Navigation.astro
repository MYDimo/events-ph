---
// src/layouts/Navigation.astro

import MobileNav from "../components/MobileNav.astro";
import ToggleTheme from "./ToggleTheme.astro";

import { fade } from "astro:transitions";

// Keep localizePath for now, but we'll manually build most links
import { localizePath } from "astro-i18next";

import {
  getLangFromUrl,
  pathTranslations, // IMPORTANT: Make sure this is imported
  getBasePathKey,
  ui
} from "../i18n/utils.ts";

const lang = getLangFromUrl(Astro.url) as "en" | "bg";
const currentPathname = Astro.url.pathname;

// --- New/Modified Link Generation Logic ---
// Helper function to get the correct localized path based on the target language
// This will replace most localizePath() calls for internal navigation
function getLocalizedNavPath(canonicalPathKey: keyof typeof pathTranslations, targetLang: "en" | "bg") {
  const localizedSegment = pathTranslations[canonicalPathKey]?.[targetLang];

  if (!localizedSegment) {
    console.warn(`[Nav] Missing path translation for canonical key "${canonicalPathKey}" in language "${targetLang}". Defaulting to "/".`);
    return "/";
  }

  // If the target language is English AND the path is not the root,
  // prepend "/en".
  // For the default language ('bg' in your case) or for the root path '/',
  // no prefix is needed for the default URL structure.
  if (targetLang === 'en' && localizedSegment !== '/') {
    return `/en${localizedSegment}`;
  }
  return localizedSegment;
}

// Define your canonical paths (usually the default language ones)
const homeCanonicalPath = "/";
const servicesCanonicalPath = "/услуги";
const aboutCanonicalPath = "/за-мен";
const momentsCanonicalPath = "/моменти";


// Generate localized hrefs for the current language (lang)
const homeHref = getLocalizedNavPath(homeCanonicalPath, lang);
const servicesHref = getLocalizedNavPath(servicesCanonicalPath, lang);
const aboutHref = getLocalizedNavPath(aboutCanonicalPath, lang);
const momentsHref = getLocalizedNavPath(momentsCanonicalPath, lang);

// Keep your language switcher links as they are, they seem to work for switching
const currentPageKey = getBasePathKey(currentPathname, lang);
const targetEnPath = pathTranslations[currentPageKey]?.en ?? "/";
const targetBgPath = pathTranslations[currentPageKey]?.bg ?? "/";
const enBasePath = targetEnPath === "/" ? "" : targetEnPath;
const bgBasePath = targetBgPath === "/" ? "" : targetBgPath;
const enLinkHref = `/en${enBasePath}`;
const bgLinkHref = bgBasePath === "" ? "/" : bgBasePath;

// Console logs for debugging (you can remove these later)
console.log("Nav Astro.url.pathname:", Astro.url.pathname);
console.log("Nav detected lang by getLangFromUrl:", lang);
console.log("Nav Home Href:", homeHref);
console.log("Nav Services Href:", servicesHref);
console.log("Nav About Href:", aboutHref);
console.log("Nav Moments Href:", momentsHref);


// Props for MobileNav
const mobileNavProps = {
  lang: lang,
  homeHref: homeHref, // Use the manually generated href
  servicesHref: servicesHref, // Use the manually generated href
  aboutHref: aboutHref,   // Use the manually generated href
  momentsHref: momentsHref, // Use the manually generated href
  navHomeText: ui[lang]["nav.home"],
  navServicesText: ui[lang]["nav.services"],
  navAboutText: ui[lang]["nav.about"],
  navMomentsText: ui[lang]["nav.moments"],
  enLinkHref: enLinkHref,
  bgLinkHref: bgLinkHref,
  toggleMenuLabel: ui[lang]["nav.toggleMenu"],
};
---

<nav id="navigation" class="relative w-full group z-[100]">
  <div id="nav-desktop" class="hidden lg:block *:m-8">
    <div
      transition:animate={fade({ duration: "1.5s" })}
      class="fixed top-0 left-0 group-hover:blur-sm group-hover:hover:blur-none group-hover:hover:scale-[1.1] duration-100"
    >
      <a href={homeHref}>{ui[lang]["nav.home"]}</a>
    </div>
    <div
      transition:animate={fade({ duration: "2s" })}
      class="fixed top-0 right-0 group-hover:blur-sm group-hover:hover:blur-none group-hover:hover:scale-[1.1] duration-100"
    >
      <a href={servicesHref}>{ui[lang]["nav.services"]}</a> 
    </div>

    <div
      transition:animate={fade({ duration: "2s" })}
      class="fixed top-1/2 left-0 group-hover:blur-sm group-hover:hover:blur-none duration-100"
    >
      <div class="group/locales flex divide-x-2">
        <a
          href={enLinkHref}
          class=`pr-2 duration-300 group-hover/locales:opacity-20 group-hover/locales:hover:opacity-100 ${lang === 'en' ? 'pointer-events-none text-gray-400' : ''}`
          aria-current={lang === "en" ? "page" : undefined}
          lang="en"
          hreflang="en">en</a
        >
        <a
          href={bgLinkHref}
          class=`pl-2 duration-300 group-hover/locales:opacity-20 group-hover/locales:hover:opacity-100 ${lang === 'bg' ? 'pointer-events-none text-gray-400' : ''}`
          aria-current={lang === "bg" ? "page" : undefined}
          lang="bg"
          hreflang="bg">bg</a
        >
      </div>
    </div>

    <div
      class="fixed right-0 top-1/2 group-hover:blur-sm group-hover:hover:blur-none duration-100"
    >
      <!-- <ToggleTheme /> -->
    </div>

    <div
      transition:animate={fade({ duration: "2s" })}
      class="peer fixed bottom-0 left-0 group-hover:blur-sm group-hover:hover:blur-none group-hover:hover:scale-[1.1] duration-100"
    >
      <a href={aboutHref}>{ui[lang]["nav.about"]}</a> 
    </div>
    <div
      transition:animate={fade({ duration: "2s" })}
      class="fixed bottom-0 right-0 group-hover:blur-sm group-hover:hover:blur-none group-hover:hover:scale-[1.1] duration-100"
    >
      <a href={momentsHref}>{ui[lang]["nav.moments"]}</a> 
    </div>
  </div>

  <MobileNav {...mobileNavProps} />
</nav>